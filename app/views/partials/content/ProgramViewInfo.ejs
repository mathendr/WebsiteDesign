<div class="col-sm-6 col-sm-offset-2 col-md-6 col-md-offset-2 main">
    <div id = "excellblock">
        <h1 id = "stuff" style= "display: inline-block;"><%=ProjName%></h1>
        <button class="btnExample" type="submit" value="Submit" onclick='excel();'><img src="/imgs/excel.png" width="18" height="18" alt=""/> Export to Excel</button>
    </div>
    
        <div>
    <script src="/chart/jquery-3.2.1.min.js"></script>
    <script>       
        function excel() {
            var tab_text = "<table border='2px'><tr bgcolor='#87AFC6'>";
            var textRange;
            var j = 0;
            var tab = "<tr bgcolor='#87AFC6'>";
            tab = document.getElementById('InfoTable'); // id of table
            
            for (j = 0; j < tab.rows.length; j++) {
                tab_text = tab_text + tab.rows[j].innerHTML + "</tr>";
            }
            tab_text = tab_text + "</table>";
            tab_text = tab_text.replace(/<A[^>]*>|<\/A>/g, "");
        
            var ua = window.navigator.userAgent;
            var msie = ua.indexOf("MSIE ");
            
            sa = window.open('data:application/vnd.ms-excel,' + encodeURIComponent(tab_text));
            
            return (sa);
        }
    </script>
</div>
    <div class="table-responsive">
        <script src = "/chart/sorttable.js"></script>
        <table class="table table-responsive sortable" id="InfoTable">
            <thead>
                <tr>
                    <th><b>Account Name</b></th>
                    <th><b>Phase</b></th>
                </tr>
            </thead>
            <tbody>

                <% if (ItemList.length > 0) { %>
                    <% for(i = 0; i < ItemList.length; i++){%>
                        <tr>
                            <td><a href="<%=URL%>/<%=ItemList[i].AccountName%>"><b><%=ItemList[i].AccountName%></b></a></td>
                            <td><b><%=ItemList[i].Phase + ItemList[i].ShippingPhase%></b></td>
                        </tr>
                        <%}%>
                            <%}%>
            </tbody>
        </table>
    </div>
</div>
<div class="col-sm-4 col-md-4">
    <div id = "chartArea" class="sidebar-nav-fixed pull-right affix">
        <h3><b>Region Map</b></h3>
        <div id="mapdiv" style="width: 325px; height: 200px;" style="background-color:#222222;"></div>
        <h3><b>Shipping Overview</b></h3>
        <canvas id="myChart" width="325px" height="200px"></canvas>
    </div>
</div>

        <script src="../map/ammap.js" type="text/javascript"></script>
        <!-- map file should be included after ammap.js -->
		<script src="../map/maps/js/worldLow.js" type="text/javascript"></script>
		<script src="../map/themes/black.js" type="text/javascript"></script>
        <script>
			/*
			        		although ammap has methos like getAreaCenterLatitude and getAreaCenterLongitude,
			        		they are not suitable in quite a lot of cases as the center of some countries
			        		is even outside the country itself (like US, because of Alaska and Hawaii)
			        		That's why wehave the coordinates stored here
			        	*/
            //SORT VALUES BY REGION
            var regionArr=[0, 0 , 0, 0, 0];
            var regions = "<%=Regions%>";
            var y = regions.split(",");
              for(var i = 0; i < y.length; i++){
                if( y[i] === "NA"){
                   regionArr[0] +=1;
                }
                else if(y[i] === "EMEA"){
                   regionArr[1] +=1;
                }
                else if(y[i] === "APJ"){
                    regionArr[2] +=1;
                }
                else if(y[i] === "CHINA"){
                    regionArr[3] +=1;
                }
                else if(y[i] === "LAC"){
                    regionArr[4] +=1;
                }        
            }
            
			var latlong = {};
			
			latlong["BR"] = {
				"latitude": -10,
				"longitude": -55
			};
            latlong["CN"] = {
				"latitude": 35,
				"longitude": 105
			};
			latlong["EG"] = {
				"latitude": 27,
				"longitude": 30
			};
			latlong["ID"] = {
				"latitude": -5,
				"longitude": 120
			};
			latlong["US"] = {
				"latitude": 50,
				"longitude": -100
			};latlong["VE"] = {
				"latitude": 8,
				"longitude": -66
			};
			var mapData = [{
				"code": "EG",
				"name": "EMEA (Europe, Middle East, Africa)",
				"value": regionArr[1],
				"color": "#5DADE2"
			}, {
				"code": "CN",
				"name": "China",
				"value": regionArr[3],
				"color": "#eea638"
			},{
				"code": "VE",
				"name": "LAC (Latin America and Caribbean)",
				"value": regionArr[4],
				"color": "#2ECC71"
			},{
				"code": "US",
				"name": "NA (North America)",
				"value": regionArr[0],
				"color": "#E74C3C"
			},{
				"code": "ID",
				"name": "APJ (Asia, Pacific, Japan)",
				"value": regionArr[2],
				"color": "#eea638",
                
			},];
			var map;
			var minBulletSize = 3;
			var maxBulletSize = 40;
			var min = Infinity;
			var max = -Infinity;
			AmCharts.theme = AmCharts.themes.black;
			// get min and max values
			for (var i = 0; i < mapData.length; i++) {
				var value = mapData[i].value;
				if (value < min) {
					min = value;
				}
				if (value > max) {
					max = value;
				}
			}
			// build map
			AmCharts.ready(function() {
				map = new AmCharts.AmMap();
				map.projection = "winkel3";
				map.areasSettings = {
					unlistedAreasColor: "#FFFFFF",
					unlistedAreasAlpha: 0.1
				};
                
               
                
				map.imagesSettings = {
					balloonText: "<span style='font-size:14px;'>[[title]]: <b>[[value]]</b></span>",
					alpha: 0.6
				}
                
                
                
                
				var dataProvider = {
					mapVar: AmCharts.maps.worldLow,
					images: []
				}
				// create circle for each country
				// it's better to use circle square to show difference between values, not a radius
				var maxSquare = maxBulletSize * maxBulletSize * 2 * Math.PI;
				var minSquare = minBulletSize * minBulletSize * 2 * Math.PI;
				// create circle for each country
				for (var i = 0; i < mapData.length; i++) {
					var dataItem = mapData[i];
					var value = dataItem.value;
					// calculate size of a bubble
					var square = (value - min) / (max - min) * (maxSquare - minSquare) + minSquare;
					if (square < minSquare) {
						square = minSquare;
					}
					var size = Math.sqrt(square / (Math.PI * 2));
					var id = dataItem.code;
					dataProvider.images.push({
						type: "circle",
						width: size,
						height: size,
						color: dataItem.color,
						longitude: latlong[id].longitude,
						latitude: latlong[id].latitude,
						title: dataItem.name,
						value: value,
                        
					});
				}
				// the following code uses circle radius to show the difference
				/*
				for (var i = 0; i < mapData.length; i++) {
					var dataItem = mapData[i];
					var value = dataItem.value;
					// calculate size of a bubble
					var size = (value - min) / (max - min) * (maxBulletSize - minBulletSize) + minBulletSize;
					if (size < minBulletSize) {
						size = minBulletSize;
					}
					var id = dataItem.code;
					dataProvider.images.push({
						type: "circle",
						width: size,
						height: size,
						color: dataItem.color,
						longitude: latlong[id].longitude,
						latitude: latlong[id].latitude,
						title: dataItem.name,
						value: value
					});
				}*/
				map.dataProvider = dataProvider;
				map.write("mapdiv");
                
			});//end of map
		</script>

<script src="<%=Location%>chart/jquery-3.2.1.min.js"></script>
<script src="<%=Location%>chart/Chart.js"></script>
<script>
    
var dict1 = [];
var arrayd = [];
var arrayl = ["Cancelled", "Pending",  "Legal", "Build", "Shipped", "Return Request", "Returned"];
var y = "<%=Phase %>";
var ys = y.split(",");
//sets label dict
for (var i = 0; i < arrayl.length; i++){
    dict1.push({
        key: 0,
        value: arrayl[i]
    })
}
    
//fills label dict with data
for (var i = 0; i < ys.length; i++){
    for (var j= 0; j < dict1.length; j++){
        if(ys[i].includes(dict1[j].value)){
            dict1[j].key++;
        }
    }
}
var dict2 = [];
    var labels = []
for(var i = 0; i < dict1.length;i++){
    if(dict1[i].key > 0){
        dict2.push(dict1[i]);
        labels.push(arrayl[i]);
    }
        
}
dict1 = dict2;
arrayl = labels;
    
//gets list of data
for (var i = 0; i < dict1.length; i++){
    arrayd.push(dict1[i].key);
}
////////////////////////////////////
var total = 0;
var percent = [];
var prettyPer = [];
for (var i = 0; i < dict1.length; i++){
    total += dict1[i].key;
}
    
function roundToTwo(num) {    
    return +(Math.round(num + "e+2")  + "e-2");
}
    
for (var i = 0; i < dict1.length; i++){
    percent[i] = (dict1[i].key / total);
    prettyPer[i] = Math.round(roundToTwo(percent[i])*100)
}  
for (var i = 0; i < arrayl.length; i++){
    arrayl[i] = arrayl[i].concat(" - "+prettyPer[i])+ "% ";
}
        
var ctx = document.getElementById("myChart").getContext('2d');
var myChart = new Chart(ctx, {
      type: 'doughnut',
      data: {
        labels: arrayl,
        
        
        datasets: [{
          backgroundColor: [
          "#FF0000",
          "#000BFE",
          "#FEFE00",
          "#DB00FF",
          "#FFAA00",
          "#30D400",
          "#01FFFB"
          ],
          data: arrayd
        }]
      },
    options: {
    responsive: true,
    legend: {
      position: 'bottom'
    }
    }
    });
    $("#myChart").css("width",$("#chartArea").width() + "px");
    $("#myChart").css("height",$("#chartArea").height()/2.3 + "px");
    $("#mapdiv").css("width",$("#chartArea").width() + "px");
    $("#mapdiv").css("height",$("#chartArea").height()/2.3 + "px");
</script>
<script>
    $(document).ready(function() {

            $('#InfoTable tr').click(function() {
                var href = $(this).find("a").attr("href");
                if (href) {
                    window.location = href;
                }
            });

        });
</script>