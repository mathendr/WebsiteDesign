<div class="col-sm-9 col-sm-offset-3 col-md-10 col-md-offset-2 main">
    <h2 class="page-header"><font color="#1ABC9C">World Map</font></h2>

    <div>
        <head>
        <meta http-equiv="Content-Type" content="text/html; charset=utf-8">
        <title>amMap example</title>

        <link rel="stylesheet" href="dist/css/dashboard.css" type="text/css">
        <script src="map/ammap.js" type="text/javascript"></script>
        <!-- map file should be included after ammap.js -->
		<script src="map/maps/js/worldLow.js" type="text/javascript"></script>
		<script src="map/themes/black.js" type="text/javascript"></script>
        <script>
			/*
			        		although ammap has methos like getAreaCenterLatitude and getAreaCenterLongitude,
			        		they are not suitable in quite a lot of cases as the center of some countries
			        		is even outside the country itself (like US, because of Alaska and Hawaii)
			        		That's why wehave the coordinates stored here
			        	*/
            //SORT VALUES BY REGION
            var regionArr=[0, 0 , 0, 0, 0];
            var x = "<%=Region %>";
            var y = x.split(",")
              for(var i = 0; i < x.length; i++){
                if( y[i] === "NA"){
                   regionArr[0] +=1;
                }
                else if(y[i] === "EMEA"){
                   regionArr[1] +=1;
                }
                else if(y[i] === "APJ"){
                    regionArr[2] +=1;
                }
                else if(y[i] === "CHINA"){
                    regionArr[3] +=1;
                }
                else if(y[i] === "LAC"){
                    regionArr[4] +=1;
                }        
            }
            
            
            console.log(regionArr[0]);
            

			var latlong = {};
			
			latlong["BR"] = {
				"latitude": -10,
				"longitude": -55
			};
            latlong["CN"] = {
				"latitude": 35,
				"longitude": 105
			};
			latlong["EG"] = {
				"latitude": 27,
				"longitude": 30
			};
			latlong["ID"] = {
				"latitude": -5,
				"longitude": 120
			};
			latlong["US"] = {
				"latitude": 50,
				"longitude": -100
			};latlong["VE"] = {
				"latitude": 8,
				"longitude": -66
			};

			var mapData = [{
				"code": "EG",
				"name": "EMEA (Europe, Middle East, Africa)",
				"value": regionArr[1],
				"color": "#5DADE2"
			}, {
				"code": "CN",
				"name": "China",
				"value": regionArr[3],
				"color": "#eea638"
			},{
				"code": "VE",
				"name": "LAC",
				"value": regionArr[4],
				"color": "#2ECC71"
			},{
				"code": "US",
				"name": "NA (North America)",
				"value": regionArr[0],
				"color": "#E74C3C"
			},{
				"code": "ID",
				"name": "APJ (Asia, Pacific, Japan)",
				"value": regionArr[2],
				"color": "#eea638"
			},];


			var map;
			var minBulletSize = 3;
			var maxBulletSize = 70;
			var min = Infinity;
			var max = -Infinity;

			AmCharts.theme = AmCharts.themes.black;

			// get min and max values
			for (var i = 0; i < mapData.length; i++) {
				var value = mapData[i].value;
				if (value < min) {
					min = value;
				}
				if (value > max) {
					max = value;
				}
			}

			// build map
			AmCharts.ready(function() {
				map = new AmCharts.AmMap();
				map.projection = "winkel3";

				map.addTitle("Regions", 18);
				map.areasSettings = {
					unlistedAreasColor: "#FFFFFF",
					unlistedAreasAlpha: 0.1
				};
                
               
                
				map.imagesSettings = {
					balloonText: "<span style='font-size:14px;'>[[title]]: <b>[[value]]</b></span>",
					alpha: 0.6
				}

				var dataProvider = {
					mapVar: AmCharts.maps.worldLow,
					images: []
				}

				// create circle for each country

				// it's better to use circle square to show difference between values, not a radius
				var maxSquare = maxBulletSize * maxBulletSize * 2 * Math.PI;
				var minSquare = minBulletSize * minBulletSize * 2 * Math.PI;

				// create circle for each country
				for (var i = 0; i < mapData.length; i++) {
					var dataItem = mapData[i];
					var value = dataItem.value;
					// calculate size of a bubble
					var square = (value - min) / (max - min) * (maxSquare - minSquare) + minSquare;
					if (square < minSquare) {
						square = minSquare;
					}
					var size = Math.sqrt(square / (Math.PI * 2));
					var id = dataItem.code;

					dataProvider.images.push({
						type: "circle",
						width: size,
						height: size,
						color: dataItem.color,
						longitude: latlong[id].longitude,
						latitude: latlong[id].latitude,
						title: dataItem.name,
						value: value
					});
				}



				// the following code uses circle radius to show the difference
				/*
				for (var i = 0; i < mapData.length; i++) {
					var dataItem = mapData[i];
					var value = dataItem.value;
					// calculate size of a bubble
					var size = (value - min) / (max - min) * (maxBulletSize - minBulletSize) + minBulletSize;
					if (size < minBulletSize) {
						size = minBulletSize;
					}
					var id = dataItem.code;

					dataProvider.images.push({
						type: "circle",
						width: size,
						height: size,
						color: dataItem.color,
						longitude: latlong[id].longitude,
						latitude: latlong[id].latitude,
						title: dataItem.name,
						value: value
					});
				}*/



				map.dataProvider = dataProvider;

				map.write("mapdiv");
			});
		</script>
    </head>

    <body style="background-color:#222222;">
        <div id="mapdiv" style="width: 100%; height: 600px;"></div>
    </body>
    
    
    
    
    </div>
    
    
</div>
